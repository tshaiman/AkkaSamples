
my-thread-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 8
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 64d
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

akka {
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
  loglevel = "WARNING"
  actor {
    log-remote-lifecycle-events = off
    provider = cluster
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer",
      avro = "hopped.akka.serialization.AvroSerializer"
    }
    serialization-bindings {
      "com.dv.akka.clusterpoc.models.DvImpression11" = avro
      "com.dv.akka.clusterpoc.models.DvImpression12" = avro
      "com.dv.akka.clusterpoc.models.DvImpression" = avro
      "com.dv.akka.clusterpoc.models.DvImpProto" = proto
      "com.dv.akka.clusterpoc.models.DvImpProto1" = proto
      "com.dv.akka.clusterpoc.models.DvImpProto2" = proto
      "com.dv.akka.clusterpoc.models.DvImpressionHuge" = proto
      "com.dv.akka.clusterpoc.models.Job" = proto

    }
  }

  remote {
    artery {
      enabled = off
      transport = aeron-udp
    }
  }

  cluster {
    seed-nodes-local = [
      "akka://ClusterSystem@127.0.0.1:2551",
      "akka://ClusterSystem@127.0.0.1:2552"]

    seed-nodes-remote = ["akka.tcp://ClusterSystem@172.25.0.43:2551","akka.tcp://ClusterSystem@172.25.0.43:2552"]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #auto-down-unreachable-after = 10s
  }

}


//WorkerGateway cluster route
akka.actor.deployment {
  /clusterService/workerRouter {
    router = round-robin-group
    routees.paths = ["/user/serviceGateway"]
    cluster {
      enabled = on
      allow-local-routees = true
      use-role = compute
    }
  }

//The Worker Pool
  /serviceGateway/workerRouter {
    router = smallest-mailbox-pool
    nr-of-instances = 1500
    pool-dispatcher {
      executor = "thread-pool-executor"
      attempt-teamwork = on
      # allocate exactly 5 threads for this pool
      thread-pool-executor {
        core-pool-size-min = 64
        core-pool-size-max = 128
      }
    }
  }
}

# Enable metrics extension in akka-cluster-metrics.
#akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
akka.cluster.metrics.native-library-extract-folder = ${user.dir}/target/native
